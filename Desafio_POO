class Trilha:
    def __init__(self, distancia_total, grau_dificuldade, localizacao, nome_trilha, pessoas):
        self.pessoas = pessoas
        self.distancia_total = distancia_total
        self.grau_dificuldade = grau_dificuldade
        self.localizacao = localizacao
        self.nome_trilha = nome_trilha

    def gamificar(self):
        pontuacao = 0
        if len(self.pessoas) > 10:
            pontuacao -= 10
        for pessoa in self.pessoas:
            if isinstance(pessoa, Familia):
                pontuacao += 20
            elif isinstance(pessoa, Amigos):
                pontuacao += 15
            elif isinstance(pessoa, Guia):
                pontuacao -= 5
            elif pessoa.idade < 18:
                pontuacao += 10
        print(pontuacao)

class Pessoa:
    def __int__(self, nome, idade, endereco):
        self.idade = idade
        self.nome = nome
        self.endereco = endereco

class Amigos(Pessoa):
    def __init__(self, nome, idade, endereco):
        self.nome = nome
        self.idade = idade
        self.endereco = endereco

class Familia(Pessoa):
    def __init__(self, nome, idade, endereco):
        self.nome = nome
        self.idade = idade
        self.endereco = endereco

class Guia(Pessoa):
    def __init__(self, nome, idade, endereco, valor_medio):
        self.nome = nome
        self.idade = idade
        self.endereco = endereco
        self.valor_medio = valor_medio

pessoa1 = Familia('Maria', 45, 'Joaquim Nabuco')
pessoa2 = Amigos('Joaquim', 18, 'Santos Dumont')
pessoa3 = Guia('Bruno', 20, 'Aldeota', 1200)

grupo1 = [pessoa1, pessoa2, pessoa3]
Guia1 = Trilha(100, 'Medio', 'Maranguape', 'Landeira Grande', grupo1)
print(Guia1.gamificar())
--------------------------------------------------------------------
--------------------------------------------------------------------


class Computador:
    def __init__(self, Modelo, Fabricante, Processador, Memoria, TamanhoHD, OcupadoHD, Ligado):
        self.Modelo = Modelo
        self.Fabricante = Fabricante
        self.Processador = Processador
        self.Memoria = Memoria
        self.TamanhoHD = TamanhoHD
        self.OcupadoHD = OcupadoHD
        self.Ligado = Ligado

    def liga(self):
        if self.Ligado == True:
            print("O Computador está ligado")
        else:
            print("O Computador está desligado")

    def desliga(self):
        if self.Ligado == False:
            print("O Computador está desligado")
        else:
            print("O Computador está ligado")

    def limparHD(self):
        limpar = float(input("Inserir espaço que deve ser liberado: "))
        self.OcupadoHD = self.OcupadoHD - limpar
        livre = self.TamanhoHD - self.OcupadoHD
        if self.OcupadoHD >= 0:
            print(f'O Espaço ocupado é de {self.OcupadoHD}Gb \n'
                  f'O Espaço livre é de {livre}Gb')
        else:
            print("Não foi possivel apagar essa quantidade de dados")

    def ocuparHD(self):
        ocupar = float(input("Inserir espaço que vai ser ocupado no HD: "))
        self.OcupadoHD = self.OcupadoHD + ocupar
        print(f'O Espaço ocupado do HD sera de {self.OcupadoHD}')

computador1 = Computador('Intel', 'Gigabyte', 'Intel Graphics', 4, 1000, 50, True)
computador1.liga()
computador1.ocuparHD()
print('Espaço ocupado pelo HD: {}'.format(computador1.OcupadoHD))
computador1.desliga()
computador1.limparHD()
